# --- Namespace ---
- name: Ensure namespace exists
  kubernetes.core.k8s:
    api_version: v1
    kind: Namespace
    name: "{{ open5gs_ns }}"
    state: present

# --- gNB deploy ---
- name: Apply srsRAN gNB (kubectl -k)
  ansible.builtin.command: >
    {{ kubectl_bin }} apply -k "{{ repo_dest }}/{{ srs_repo_rel }}/{{ srs_gnb_rel }}" -n {{ open5gs_ns }}
  register: srs_gnb_apply
  changed_when: >
    ('configured' in (srs_gnb_apply.stdout | default(''))) or
    ('created' in (srs_gnb_apply.stdout | default('')))
  failed_when: srs_gnb_apply.rc != 0

- name: Wait for gNB pod(s) Ready
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: "{{ open5gs_ns }}"
    label_selectors: "{{ srs_gnb_label_selectors }}"
  register: srs_gnb_pods
  until: >
    (srs_gnb_pods.resources | length) > 0 and
    (
      srs_gnb_pods.resources
      | map(attribute='status.containerStatuses') | map('default', []) | list
      | sum(start=[]) | map(attribute='ready') | list | unique
    ) == [True]
  retries: 60
  delay: 5

- name: Select a gNB pod name
  ansible.builtin.set_fact:
    gnb_pod_name: "{{ (srs_gnb_pods.resources | first).metadata.name }}"

# --- gNB start (DETACHED) ---
- name: Check if gNB already running
  ansible.builtin.command: >
    {{ kubectl_bin }} -n {{ open5gs_ns }} exec {{ gnb_pod_name }} -- /bin/sh -lc
    'test -f /tmp/gnb.pid && kill -0 $(cat /tmp/gnb.pid) 2>/dev/null'
  register: gnb_running
  changed_when: false
  failed_when: false

- name: Start gNB in background
  when: gnb_running.rc != 0
  ansible.builtin.command: >
    {{ kubectl_bin }} -n {{ open5gs_ns }} exec {{ gnb_pod_name }} -- /bin/sh -lc
    'nohup /srsran/config/start_gnb.sh > /var/log/gnb.log 2>&1 &
     echo $! > /tmp/gnb.pid'
  register: gnb_start
  changed_when: gnb_start.rc == 0
  failed_when: gnb_start.rc != 0

# --- UE deploy ---
- name: Apply srsRAN UEs (kubectl -k)
  ansible.builtin.command: >
    {{ kubectl_bin }} apply -k "{{ repo_dest }}/{{ srs_repo_rel }}/{{ srs_ue_rel }}" -n {{ open5gs_ns }}
  register: srs_ue_apply
  changed_when: >
    ('configured' in (srs_ue_apply.stdout | default(''))) or
    ('created' in (srs_ue_apply.stdout | default('')))
  failed_when: srs_ue_apply.rc != 0

- name: Wait for at least ue_count UE pods Running
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: "{{ open5gs_ns }}"
    label_selectors: "{{ srs_ue_label_selectors }}"
  register: srs_ue_pods
  until: >
    (srs_ue_pods.resources | length) >= ue_count and
    (srs_ue_pods.resources | map(attribute='status.phase') | unique) == ['Running']
  retries: 90
  delay: 5

# --- Resolve UE pod order (ue1..ueN) ---
- name: Desired logical UE names
  ansible.builtin.set_fact:
    ue_logical_names: "{{ range(1, ue_count + 1) | map('int') | map('regex_replace', '^(.*)$', 'ue\\1') | list }}"

- name: Compute UE exec plan (map ue# -> real pod name)
  vars:
    matched: >-
      {{
        (srs_ue_pods.resources
         | selectattr('metadata.name','search','(^|-)'+item+'($|-)') | list)
        +
        (srs_ue_pods.resources
         | selectattr('metadata.name','search', item) | list)
      }}
  ansible.builtin.set_fact:
    ue_exec_plan: >-
      {{
        (ue_exec_plan | default([])) + [(
          ( (matched | length) > 0 )
          | ternary( (matched | first).metadata.name,
                     (srs_ue_pods.resources | sort(attribute='metadata.name') | list)[(loop.index0 % (srs_ue_pods.resources | length))].metadata.name )
        )]
      }}
  loop: "{{ ue_logical_names }}"

- name: Show UE â†’ pod mapping
  ansible.builtin.debug:
    msg: |
      UE mapping:
      {% for i in range(ue_count) -%}
      ue{{ i+1 }} -> {{ ue_exec_plan[i] }}
      {% endfor %}

# --- Start each UE (DETACHED) ---
- name: Check & start each UE in background
  vars:
    idx: "{{ item }}"             # 1..N
    pod: "{{ ue_exec_plan[item-1] }}"
  block:
    - name: Check if ue{{ idx }} already running
      ansible.builtin.command: >
        {{ kubectl_bin }} -n {{ open5gs_ns }} exec {{ pod }} -- /bin/sh -lc
        'test -f /tmp/ue{{ idx }}.pid && kill -0 $(cat /tmp/ue{{ idx }}.pid) 2>/dev/null'
      register: ue_running
      changed_when: false
      failed_when: false

    - name: Start ue{{ idx }} in background
      when: ue_running.rc != 0
      ansible.builtin.command: >
        {{ kubectl_bin }} -n {{ open5gs_ns }} exec {{ pod }} -- /bin/sh -lc
        'nohup /srsran/config/start_ue.sh {{ idx }} > /var/log/ue{{ idx }}.log 2>&1 &
         echo $! > /tmp/ue{{ idx }}.pid'
      register: ue_start
      changed_when: ue_start.rc == 0
      failed_when: ue_start.rc != 0
  loop: "{{ range(1, ue_count + 1) | list }}"

# --- GNU Radio multi-UE (DETACHED, run ONCE on ue1) ---
- name: Check if GNU multi-UE already running on ue1
  ansible.builtin.command: >
    {{ kubectl_bin }} -n {{ open5gs_ns }} exec {{ ue_exec_plan[0] }} -- /bin/sh -lc
    'test -f /tmp/gnu_multi_ue.pid && kill -0 $(cat /tmp/gnu_multi_ue.pid) 2>/dev/null'
  register: gnu_running_check
  changed_when: false
  failed_when: false

- name: Start GNU multi-UE on ue1 in background
  when: gnu_running_check.rc != 0
  ansible.builtin.command: >
    {{ kubectl_bin }} -n {{ open5gs_ns }} exec {{ ue_exec_plan[0] }} -- /bin/sh -lc
    'nohup python3 /srsran/config/multi_ue_scenario.py -n {{ ue_count }}
     > /var/log/gnu_multi_ue.log 2>&1 &
     echo $! > /tmp/gnu_multi_ue.pid'
  register: gnu_start
  changed_when: gnu_start.rc == 0
  failed_when: gnu_start.rc != 0

# --- Add default route on each UE (usually quick; keep foreground) ---
- name: Add default route on each UE
  ansible.builtin.command: >
    {{ kubectl_bin }} -n {{ open5gs_ns }}
    exec {{ ue_exec_plan[loop.index0] }} -- /srsran/config/add_route.sh
  loop: "{{ range(1, ue_count + 1) | list }}"
  register: route_res
  changed_when: route_res.rc == 0
  failed_when: route_res.rc != 0

- name: Summary
  ansible.builtin.debug:
    msg:
      - "gNB started (detached): PID /tmp/gnb.pid, log /var/log/gnb.log"
      - "UEs started (detached): PID /tmp/ueN.pid, logs /var/log/ueN.log"
      - "GNU multi-UE started (detached on ue1): PID /tmp/gnu_multi_ue.pid, log /var/log/gnu_multi_ue.log"
      - "Routes added on all UEs"